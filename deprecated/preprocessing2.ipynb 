{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# MAST30034 Applied Data Science Project 1 Preprocessing\n",
    "\n",
    "Student Name: Haonan Zhong\n",
    "\n",
    "Student ID: 867492"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pandas.tseries.holiday import USFederalHolidayCalendar as calander\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Data Importing and Preprocessing"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "source": [
    "# read datasets\n",
    "yellow_01 = pd.read_csv('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/raw_data/yellow_2018_01.csv')\n",
    "yellow_02 = pd.read_csv('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/raw_data/yellow_2018_02.csv')\n",
    "yellow_07 = pd.read_csv('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/raw_data/yellow_2018_07.csv')\n",
    "yellow_08 = pd.read_csv('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/raw_data/yellow_2018_08.csv')\n",
    "\n",
    "# combine the monthly data as a season\n",
    "yellow_winter = pd.concat([yellow_01, yellow_02]).reset_index(drop=True)\n",
    "yellow_summer = pd.concat([yellow_07, yellow_08]).reset_index(drop=True)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "source": [
    "yellow_winter.shape"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "(17251950, 17)"
      ]
     },
     "metadata": {},
     "execution_count": 4
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "source": [
    "yellow_summer.shape"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "(15698882, 17)"
      ]
     },
     "metadata": {},
     "execution_count": 5
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "source": [
    "yellow_winter = yellow_winter.drop(['VendorID', 'store_and_fwd_flag', 'extra', 'mta_tax', 'tolls_amount', 'improvement_surcharge'], axis=1)\n",
    "yellow_summer = yellow_summer.drop(['VendorID', 'store_and_fwd_flag', 'extra', 'mta_tax', 'tolls_amount', 'improvement_surcharge'], axis=1)\n",
    "\n",
    "yellow_winter['duration'] = pd.to_datetime(yellow_winter['tpep_dropoff_datetime']) - pd.to_datetime(yellow_winter['tpep_pickup_datetime'])\n",
    "yellow_summer['duration'] = pd.to_datetime(yellow_summer['tpep_dropoff_datetime']) - pd.to_datetime(yellow_summer['tpep_pickup_datetime'])\n",
    "yellow_winter['duration'] = yellow_winter['duration'] / np.timedelta64(1, 'm')\n",
    "yellow_summer['duration'] = yellow_summer['duration'] / np.timedelta64(1, 'm')"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "source": [
    "# remove invalid data\n",
    "\n",
    "# invalid date\n",
    "yellow_winter = yellow_winter[(yellow_winter['tpep_pickup_datetime'] >= '2018-01-01 00:00:00') & (yellow_winter['tpep_pickup_datetime'] <= '2018-02-28 23:59:59') & (yellow_winter['tpep_dropoff_datetime'] >= '2018-01-01 00:00:00') & (yellow_winter['tpep_dropoff_datetime'] <= '2018-02-28 23:59:59')]\n",
    "yellow_summer = yellow_summer[(yellow_summer['tpep_pickup_datetime'] >= '2018-07-01 00:00:00') & (yellow_summer['tpep_pickup_datetime'] <= '2018-08-31 23:59:59') & (yellow_summer['tpep_dropoff_datetime'] >= '2018-07-01 00:00:00') & (yellow_summer['tpep_dropoff_datetime'] <= '2018-08-31 23:59:59')]\n",
    "\n",
    "# passenger == 0\n",
    "yellow_winter = yellow_winter[(yellow_winter['passenger_count'] > 0) & (yellow_winter['passenger_count'] < 7)]\n",
    "yellow_summer = yellow_summer[(yellow_summer['passenger_count'] > 0) & (yellow_summer['passenger_count'] < 7)]\n",
    "\n",
    "# trip_distance == 0\n",
    "yellow_winter = yellow_winter[yellow_winter['trip_distance'] >= 0]\n",
    "yellow_summer = yellow_summer[yellow_summer['trip_distance'] >= 0]\n",
    "\n",
    "yellow_winter = yellow_winter[(yellow_winter['duration'] > 1) & (yellow_winter['duration'] < 120)]\n",
    "yellow_summer = yellow_summer[(yellow_summer['duration'] > 1) & (yellow_summer['duration'] < 120)]\n",
    "\n",
    "# payment method other than cash and credit card\n",
    "yellow_winter = yellow_winter[(yellow_winter['payment_type'] != 3) & (yellow_winter['payment_type'] != 4) & (yellow_winter['payment_type'] != 5) & (yellow_winter['payment_type'] != 6)]\n",
    "yellow_summer = yellow_summer[(yellow_summer['payment_type'] != 3) & (yellow_summer['payment_type'] != 4) & (yellow_summer['payment_type'] != 5) & (yellow_summer['payment_type'] != 6)]\n",
    "\n",
    "# exclude instances with fare amount less than 2.5\n",
    "yellow_winter = yellow_winter[(yellow_winter['fare_amount'] >= 2.5)]\n",
    "yellow_summer = yellow_summer[(yellow_summer['fare_amount'] >= 2.5)]\n",
    "\n",
    "# total_amount > 0\n",
    "yellow_winter = yellow_winter[(yellow_winter['total_amount'] >= 2.5)]\n",
    "yellow_summer = yellow_summer[(yellow_summer['total_amount'] >= 2.5)]\n",
    "\n",
    "# PU and DO location id not within NYC taxi zone\n",
    "yellow_winter = yellow_winter[(yellow_winter['PULocationID'] >= 1) & (yellow_winter['PULocationID'] <= 263) & (yellow_winter['DOLocationID'] >= 1) & (yellow_winter['DOLocationID'] <= 263)]\n",
    "yellow_summer = yellow_summer[(yellow_summer['PULocationID'] >= 1) & (yellow_summer['PULocationID'] <= 263) & (yellow_summer['DOLocationID'] >= 1) & (yellow_summer['DOLocationID'] <= 263)]"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "source": [
    "target_list = ['fare_amount', 'tip_amount', 'total_amount', 'trip_distance']"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "source": [
    "yellow_summer[target_list].describe()"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "        fare_amount    tip_amount  total_amount  trip_distance\n",
       "count  1.504468e+07  1.504468e+07  1.504468e+07   1.504468e+07\n",
       "mean   1.287288e+01  1.809099e+00  1.616686e+01   3.002115e+00\n",
       "std    1.062720e+01  2.429071e+00  1.325061e+01   3.764737e+00\n",
       "min    2.500000e+00  0.000000e+00  3.300000e+00   1.000000e-02\n",
       "25%    6.500000e+00  0.000000e+00  8.750000e+00   1.000000e+00\n",
       "50%    9.500000e+00  1.360000e+00  1.180000e+01   1.680000e+00\n",
       "75%    1.450000e+01  2.360000e+00  1.776000e+01   3.100000e+00\n",
       "max    4.900000e+02  3.997200e+02  8.531200e+02   8.317000e+02"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>trip_distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.504468e+07</td>\n",
       "      <td>1.504468e+07</td>\n",
       "      <td>1.504468e+07</td>\n",
       "      <td>1.504468e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.287288e+01</td>\n",
       "      <td>1.809099e+00</td>\n",
       "      <td>1.616686e+01</td>\n",
       "      <td>3.002115e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.062720e+01</td>\n",
       "      <td>2.429071e+00</td>\n",
       "      <td>1.325061e+01</td>\n",
       "      <td>3.764737e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.500000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.300000e+00</td>\n",
       "      <td>1.000000e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.500000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>8.750000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.500000e+00</td>\n",
       "      <td>1.360000e+00</td>\n",
       "      <td>1.180000e+01</td>\n",
       "      <td>1.680000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.450000e+01</td>\n",
       "      <td>2.360000e+00</td>\n",
       "      <td>1.776000e+01</td>\n",
       "      <td>3.100000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.900000e+02</td>\n",
       "      <td>3.997200e+02</td>\n",
       "      <td>8.531200e+02</td>\n",
       "      <td>8.317000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "execution_count": 38
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "source": [
    "yellow_winter[target_list].describe()"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "        fare_amount    tip_amount  total_amount  trip_distance\n",
       "count  1.655375e+07  1.655375e+07  1.655375e+07   1.655375e+07\n",
       "mean   1.205432e+01  1.814483e+00  1.528727e+01   2.782140e+00\n",
       "std    9.888720e+00  2.319088e+00  1.245505e+01   4.670200e+01\n",
       "min    2.500000e+00  0.000000e+00  2.800000e+00   1.000000e-02\n",
       "25%    6.500000e+00  0.000000e+00  8.300000e+00   9.400000e-01\n",
       "50%    9.000000e+00  1.450000e+00  1.130000e+01   1.590000e+00\n",
       "75%    1.350000e+01  2.360000e+00  1.660000e+01   2.870000e+00\n",
       "max    3.006000e+03  4.417100e+02  3.006800e+03   1.894838e+05"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>trip_distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.655375e+07</td>\n",
       "      <td>1.655375e+07</td>\n",
       "      <td>1.655375e+07</td>\n",
       "      <td>1.655375e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.205432e+01</td>\n",
       "      <td>1.814483e+00</td>\n",
       "      <td>1.528727e+01</td>\n",
       "      <td>2.782140e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.888720e+00</td>\n",
       "      <td>2.319088e+00</td>\n",
       "      <td>1.245505e+01</td>\n",
       "      <td>4.670200e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.500000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.800000e+00</td>\n",
       "      <td>1.000000e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.500000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>8.300000e+00</td>\n",
       "      <td>9.400000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>1.450000e+00</td>\n",
       "      <td>1.130000e+01</td>\n",
       "      <td>1.590000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.350000e+01</td>\n",
       "      <td>2.360000e+00</td>\n",
       "      <td>1.660000e+01</td>\n",
       "      <td>2.870000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.006000e+03</td>\n",
       "      <td>4.417100e+02</td>\n",
       "      <td>3.006800e+03</td>\n",
       "      <td>1.894838e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "execution_count": 39
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "yellow_winter.boxplot(column=target_list)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "yellow_summer.boxplot(column=target_list)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "source": [
    "Q1_winter = yellow_winter[target_list].quantile(0.25)\n",
    "Q3_winter = yellow_winter[target_list].quantile(0.75)\n",
    "Q1_summer = yellow_summer[target_list].quantile(0.25)\n",
    "Q3_summer = yellow_summer[target_list].quantile(0.75)\n",
    "IQR_winter = Q3_winter - Q1_winter\n",
    "IQR_summer = Q3_summer - Q1_summer"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "source": [
    "cleaned_winter = yellow_winter[~((yellow_winter[target_list] < (Q1_winter - 3 * IQR_winter)).any(axis=1))]\n",
    "cleaned_winter = yellow_winter[~((yellow_winter[target_list] > (Q3_winter + 3 * IQR_winter)).any(axis=1))]\n",
    "cleaned_summer = yellow_summer[~((yellow_summer[target_list] < (Q1_summer - 3 * IQR_summer)).any(axis=1))]\n",
    "cleaned_summer = yellow_summer[~((yellow_summer[target_list] > (Q3_summer + 3 * IQR_summer)).any(axis=1))]"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "#cleaned_winter.boxplot(column=target_list)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "#cleaned_summer.boxplot(column=target_list)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Feature Engineering"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "cleaned_winter['season'] = 'winter'\n",
    "cleaned_summer['season'] = 'summer'\n",
    "cleaned_2018 = pd.concat([cleaned_winter, cleaned_summer]).reset_index(drop=True)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# identifying tipped trip\n",
    "cleaned_2018['tip'] = np.where(cleaned_2018['tip_amount'] > 0, 1, 0)\n",
    "\n",
    "# identifying airport trip\n",
    "airport_rate_code = [2, 3]\n",
    "airport_zone_code = [1, 132, 138]\n",
    "cleaned_2018['airport_trip'] = np.where((cleaned_2018['RatecodeID'].isin(airport_rate_code)) | (cleaned_2018['PULocationID'].isin(airport_zone_code)) | (cleaned_2018['DOLocationID'].isin(airport_zone_code)), 1, 0)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# Create a new column that contains only pick up date\n",
    "#cleaned_winter['time'] = cleaned_winter['tpep_pickup_datetime'].str[11:13] + \":00\"\n",
    "cleaned_2018['tpep_pickup_datetime'] = pd.to_datetime(cleaned_2018['tpep_pickup_datetime'])\n",
    "cleaned_2018['tpep_dropoff_datetime'] = pd.to_datetime(cleaned_2018['tpep_dropoff_datetime'])\n",
    "cleaned_2018['date'] = cleaned_2018['tpep_pickup_datetime'].dt.normalize()\n",
    "cleaned_2018['time'] = cleaned_2018['tpep_pickup_datetime'].dt.hour\n",
    "\n",
    "#cleaned_summer['time'] = cleaned_summer['tpep_pickup_datetime'].str[11:13] + \":00\"\n",
    "#cleaned_summer['tpep_pickup_datetime'] = pd.to_datetime(cleaned_summer['tpep_pickup_datetime'])\n",
    "#cleaned_summer['tpep_dropoff_datetime'] = pd.to_datetime(cleaned_summer['tpep_dropoff_datetime'])\n",
    "#cleaned_summer['date'] = cleaned_summer['tpep_pickup_datetime'].dt.normalize()\n",
    "#cleaned_summer['time'] = cleaned_summer['tpep_pickup_datetime'].dt.hour\n",
    "\n",
    "cleaned_2018['weekday'] = cleaned_2018['date'].dt.day_name()\n",
    "#cleaned_summer['weekday'] = cleaned_summer['date'].dt.day_name()"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "def f(row):\n",
    "    if (row >= 6) & (row < 18):\n",
    "        val = \"day\"\n",
    "    else:\n",
    "        val = \"night\"\n",
    "    return val\n",
    "\n",
    "cleaned_2018['time_desc'] = cleaned_2018['time'].apply(f)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# identifying holidays\n",
    "\n",
    "cal = calander()\n",
    "holidays = cal.holidays(start='2018-01-01', end='2018-12-31')\n",
    "cleaned_2018['holiday'] = cleaned_2018['date'].isin(holidays)\n",
    "cleaned_2018['week'] = cleaned_2018['date'].dt.dayofweek\n",
    "cleaned_2018.loc[cleaned_2018['week'] > 5, 'type'] = \"weekend\"\n",
    "cleaned_2018.loc[cleaned_2018['week'] <= 5, 'type'] = \"workday\"\n",
    "cleaned_2018.loc[cleaned_2018['holiday'] == True, 'type'] = \"holiday\"\n",
    "cleaned_2018 = cleaned_2018.drop(['holiday', 'week'], axis=1)\n",
    "\n",
    "#cleaned_summer['week'] = cleaned_summer['date'].dt.dayofweek\n",
    "#cleaned_summer.loc[cleaned_summer['week'] > 5, 'type'] = \"weekend\"\n",
    "#cleaned_summer.loc[cleaned_summer['week'] <= 5, 'type'] = \"workday\"\n",
    "#cleaned_summer.loc[cleaned_summer['holiday'] == True, 'type'] = \"holiday\"\n",
    "#cleaned_summer = cleaned_summer.drop(['holiday', 'week'], axis=1)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Preprocess external weather dataset"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "def convert_to_celsius(temp):\n",
    "    temp_celsius = (temp - 32.0) * (5.0/9.0)\n",
    "    return temp_celsius"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "weather = pd.read_csv('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/raw_data/weather_2018_new.csv')\n",
    "weather['TMAX'] = convert_to_celsius(weather['TMAX'])\n",
    "weather['TMIN'] = convert_to_celsius(weather['TMIN'])\n",
    "weather['TAVG'] = (weather['TMAX'] + weather['TMIN']) / 2\n",
    "weather['weather_type'] = weather[['WT01', 'WT02', 'WT03', 'WT04', 'WT06', 'WT08']].sum(axis=1)\n",
    "weather['weather_type'] = np.where(weather['weather_type'] > 0, 'Y', 'N')\n",
    "weather = weather.drop(['STATION', 'NAME', 'WT01', 'WT02', 'WT03', 'WT04', 'WT06', 'WT08', 'TMAX', 'TMIN'], axis=1)\n",
    "weather['DATE'] = pd.to_datetime(weather['DATE'])\n",
    "\n",
    "weather.to_feather('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/preprocessed_data/cleaned_weather.feather')"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "cleaned_2018 = pd.DataFrame(pd.merge(cleaned_2018, weather, left_on='date', right_on='DATE')).drop('DATE', axis=1)\n",
    "#cleaned_summer = pd.DataFrame(pd.merge(cleaned_summer, weather, left_on='date', right_on='DATE')).drop('DATE', axis=1)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# save to feather\n",
    "cleaned_2018.to_feather('/Users/greysonchung/Documents/mast30034_2021_s2_project_1-greysonchung/preprocessed_data/cleaned_2018.feather')"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "cleaned_2018"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "         tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0         2018-01-01 00:21:05   2018-01-01 00:24:23                1   \n",
       "1         2018-01-01 00:44:55   2018-01-01 01:03:05                1   \n",
       "2         2018-01-01 00:08:26   2018-01-01 00:14:21                2   \n",
       "3         2018-01-01 00:09:18   2018-01-01 00:27:06                2   \n",
       "4         2018-01-01 00:29:29   2018-01-01 00:32:48                3   \n",
       "...                       ...                   ...              ...   \n",
       "29337298  2018-08-31 23:45:47   2018-08-31 23:56:46                1   \n",
       "29337299  2018-08-31 23:26:24   2018-08-31 23:37:52                2   \n",
       "29337300  2018-08-31 23:24:09   2018-08-31 23:32:33                1   \n",
       "29337301  2018-08-31 23:35:09   2018-08-31 23:47:18                1   \n",
       "29337302  2018-08-31 23:41:48   2018-08-31 23:47:58                2   \n",
       "\n",
       "          trip_distance  RatecodeID  PULocationID  DOLocationID  payment_type  \\\n",
       "0                  0.50           1            41            24             2   \n",
       "1                  2.70           1           239           140             2   \n",
       "2                  0.80           1           262           141             1   \n",
       "3                  2.50           1           246           239             1   \n",
       "4                  0.50           1           143           143             2   \n",
       "...                 ...         ...           ...           ...           ...   \n",
       "29337298           3.35           1            75           137             2   \n",
       "29337299           1.80           1           144           209             1   \n",
       "29337300           1.37           1           113           231             2   \n",
       "29337301           1.27           1           231           148             1   \n",
       "29337302           1.23           1           246           186             2   \n",
       "\n",
       "          fare_amount  tip_amount  ...  time  weekday time_desc     type  \\\n",
       "0                 4.5        0.00  ...     0   Monday     night  holiday   \n",
       "1                14.0        0.00  ...     0   Monday     night  holiday   \n",
       "2                 6.0        1.00  ...     0   Monday     night  holiday   \n",
       "3                12.5        2.75  ...     0   Monday     night  holiday   \n",
       "4                 4.5        0.00  ...     0   Monday     night  holiday   \n",
       "...               ...         ...  ...   ...      ...       ...      ...   \n",
       "29337298         12.0        0.00  ...    23   Friday     night  workday   \n",
       "29337299          9.5        2.00  ...    23   Friday     night  workday   \n",
       "29337300          7.5        0.00  ...    23   Friday     night  workday   \n",
       "29337301          9.0        5.08  ...    23   Friday     night  workday   \n",
       "29337302          6.0        0.00  ...    23   Friday     night  workday   \n",
       "\n",
       "          AWND  PRCP  SNOW SNWD       TAVG weather_type  \n",
       "0         7.83  0.00   0.0  0.0 -10.555556            N  \n",
       "1         7.83  0.00   0.0  0.0 -10.555556            N  \n",
       "2         7.83  0.00   0.0  0.0 -10.555556            N  \n",
       "3         7.83  0.00   0.0  0.0 -10.555556            N  \n",
       "4         7.83  0.00   0.0  0.0 -10.555556            N  \n",
       "...        ...   ...   ...  ...        ...          ...  \n",
       "29337298  3.80  0.03   0.0  0.0  23.055556            Y  \n",
       "29337299  3.80  0.03   0.0  0.0  23.055556            Y  \n",
       "29337300  3.80  0.03   0.0  0.0  23.055556            Y  \n",
       "29337301  3.80  0.03   0.0  0.0  23.055556            Y  \n",
       "29337302  3.80  0.03   0.0  0.0  23.055556            Y  \n",
       "\n",
       "[29337303 rows x 26 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>...</th>\n",
       "      <th>time</th>\n",
       "      <th>weekday</th>\n",
       "      <th>time_desc</th>\n",
       "      <th>type</th>\n",
       "      <th>AWND</th>\n",
       "      <th>PRCP</th>\n",
       "      <th>SNOW</th>\n",
       "      <th>SNWD</th>\n",
       "      <th>TAVG</th>\n",
       "      <th>weather_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-01 00:21:05</td>\n",
       "      <td>2018-01-01 00:24:23</td>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>night</td>\n",
       "      <td>holiday</td>\n",
       "      <td>7.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-10.555556</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-01-01 00:44:55</td>\n",
       "      <td>2018-01-01 01:03:05</td>\n",
       "      <td>1</td>\n",
       "      <td>2.70</td>\n",
       "      <td>1</td>\n",
       "      <td>239</td>\n",
       "      <td>140</td>\n",
       "      <td>2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>night</td>\n",
       "      <td>holiday</td>\n",
       "      <td>7.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-10.555556</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-01-01 00:08:26</td>\n",
       "      <td>2018-01-01 00:14:21</td>\n",
       "      <td>2</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1</td>\n",
       "      <td>262</td>\n",
       "      <td>141</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>night</td>\n",
       "      <td>holiday</td>\n",
       "      <td>7.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-10.555556</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-01-01 00:09:18</td>\n",
       "      <td>2018-01-01 00:27:06</td>\n",
       "      <td>2</td>\n",
       "      <td>2.50</td>\n",
       "      <td>1</td>\n",
       "      <td>246</td>\n",
       "      <td>239</td>\n",
       "      <td>1</td>\n",
       "      <td>12.5</td>\n",
       "      <td>2.75</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>night</td>\n",
       "      <td>holiday</td>\n",
       "      <td>7.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-10.555556</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-01-01 00:29:29</td>\n",
       "      <td>2018-01-01 00:32:48</td>\n",
       "      <td>3</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1</td>\n",
       "      <td>143</td>\n",
       "      <td>143</td>\n",
       "      <td>2</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>night</td>\n",
       "      <td>holiday</td>\n",
       "      <td>7.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-10.555556</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29337298</th>\n",
       "      <td>2018-08-31 23:45:47</td>\n",
       "      <td>2018-08-31 23:56:46</td>\n",
       "      <td>1</td>\n",
       "      <td>3.35</td>\n",
       "      <td>1</td>\n",
       "      <td>75</td>\n",
       "      <td>137</td>\n",
       "      <td>2</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>Friday</td>\n",
       "      <td>night</td>\n",
       "      <td>workday</td>\n",
       "      <td>3.80</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.055556</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29337299</th>\n",
       "      <td>2018-08-31 23:26:24</td>\n",
       "      <td>2018-08-31 23:37:52</td>\n",
       "      <td>2</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1</td>\n",
       "      <td>144</td>\n",
       "      <td>209</td>\n",
       "      <td>1</td>\n",
       "      <td>9.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>Friday</td>\n",
       "      <td>night</td>\n",
       "      <td>workday</td>\n",
       "      <td>3.80</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.055556</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29337300</th>\n",
       "      <td>2018-08-31 23:24:09</td>\n",
       "      <td>2018-08-31 23:32:33</td>\n",
       "      <td>1</td>\n",
       "      <td>1.37</td>\n",
       "      <td>1</td>\n",
       "      <td>113</td>\n",
       "      <td>231</td>\n",
       "      <td>2</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>Friday</td>\n",
       "      <td>night</td>\n",
       "      <td>workday</td>\n",
       "      <td>3.80</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.055556</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29337301</th>\n",
       "      <td>2018-08-31 23:35:09</td>\n",
       "      <td>2018-08-31 23:47:18</td>\n",
       "      <td>1</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1</td>\n",
       "      <td>231</td>\n",
       "      <td>148</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>5.08</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>Friday</td>\n",
       "      <td>night</td>\n",
       "      <td>workday</td>\n",
       "      <td>3.80</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.055556</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29337302</th>\n",
       "      <td>2018-08-31 23:41:48</td>\n",
       "      <td>2018-08-31 23:47:58</td>\n",
       "      <td>2</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1</td>\n",
       "      <td>246</td>\n",
       "      <td>186</td>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>Friday</td>\n",
       "      <td>night</td>\n",
       "      <td>workday</td>\n",
       "      <td>3.80</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.055556</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29337303 rows × 26 columns</p>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "execution_count": 29
    }
   ],
   "metadata": {}
  }
 ],
 "metadata": {
  "orig_nbformat": 4,
  "language_info": {
   "name": "python",
   "version": "3.8.8",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.8.8 64-bit ('base': conda)"
  },
  "interpreter": {
   "hash": "dca0ade3e726a953b501b15e8e990130d2b7799f14cfd9f4271676035ebe5511"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}